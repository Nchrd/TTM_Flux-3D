using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;
using UnityEngine.Events;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OmekaToUnity;
//
//    var omekaToUnity = OmekaToUnity.FromJson(jsonString);

namespace OmekaToUnity
{
    /// <summary>
    /// An example script that lets us drill down from an item_set and display a piece of media
    /// </summary>
    public class GameManager : MonoBehaviour
    {
        public readonly string APIUrl = "http://serv-gi-34.utbm.fr/api/items";

        void Start()
        {
            StartCoroutine(get());
        }

        void Update()
        {

        }

        IEnumerator get()
        {
        
            UnityWebRequest www = UnityWebRequest.Get(APIUrl);

            yield return www.SendWebRequest();

            if (www.result == UnityWebRequest.Result.ConnectionError || www.result == UnityWebRequest.Result.ProtocolError)
            {
                Debug.LogError(www.error);
            }
            else
            {
                var omekaToUnity = OmekaToUnity.FromJson(www.downloadHandler.text);
                Debug.Log(omekaToUnity[1].ToString());
            }
        }

    }




    // Omeka to Unity declaration thanks to serialization
    //
    // Needs to be updated as soon as new properties/class will come in
    // For that, go to : http://serv-gi-34.utbm.fr/api/items
    // Copy ALL le text from the page and paste it in : https://app.quicktype.io
    // Choose, C# as langage, Array mode (and not list mode), put "OmekaToUnity" as Name and Generated Namespace
    // Then, just copy all the class declaration inside the namespace from the beginning and up to the end (no needs of imported packages)
    // Replace what is below with the copied code
    // Remove "OmekaToUnity" from "OmekaToUnity.Converter.Settings"
    // You're normally done
    public partial class OmekaToUnity
    {
        [JsonProperty("@context")]
        public Uri Context { get; set; }

        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public string[] Type { get; set; }

        [JsonProperty("o:id")]
        public long OId { get; set; }

        [JsonProperty("o:is_public")]
        public bool OIsPublic { get; set; }

        [JsonProperty("o:owner")]
        public OOwner OOwner { get; set; }

        [JsonProperty("o:resource_class")]
        public OOwner OResourceClass { get; set; }

        [JsonProperty("o:resource_template")]
        public OOwner OResourceTemplate { get; set; }

        [JsonProperty("o:thumbnail")]
        public object OThumbnail { get; set; }

        [JsonProperty("o:title")]
        public string OTitle { get; set; }

        [JsonProperty("thumbnail_display_urls")]
        public ThumbnailDisplayUrls ThumbnailDisplayUrls { get; set; }

        [JsonProperty("o:created")]
        public OCreated OCreated { get; set; }

        [JsonProperty("o:modified")]
        public OCreated OModified { get; set; }

        [JsonProperty("o:primary_media")]
        public object OPrimaryMedia { get; set; }

        [JsonProperty("o:media")]
        public object[] OMedia { get; set; }

        [JsonProperty("o:item_set")]
        public object[] OItemSet { get; set; }

        [JsonProperty("o:site")]
        public OOwner[] OSite { get; set; }

        [JsonProperty("dcterms:title")]
        public DctermsDescription[] DctermsTitle { get; set; }

        [JsonProperty("dcterms:description", NullValueHandling = NullValueHandling.Ignore)]
        public DctermsDescription[] DctermsDescription { get; set; }

        [JsonProperty("crm:P138_represents", NullValueHandling = NullValueHandling.Ignore)]
        public OmekaToUnityCrmP138Represent[] CrmP138Represents { get; set; }

        [JsonProperty("skos:prefLabel", NullValueHandling = NullValueHandling.Ignore)]
        public DctermsDescription[] SkosPrefLabel { get; set; }

        [JsonProperty("@reverse", NullValueHandling = NullValueHandling.Ignore)]
        public Reverse Reverse { get; set; }
    }

    public partial class OmekaToUnityCrmP138Represent
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("property_id")]
        public long PropertyId { get; set; }

        [JsonProperty("property_label")]
        public string PropertyLabel { get; set; }

        [JsonProperty("is_public")]
        public bool IsPublic { get; set; }

        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("value_resource_id")]
        public long ValueResourceId { get; set; }

        [JsonProperty("value_resource_name")]
        public string ValueResourceName { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("display_title")]
        public string DisplayTitle { get; set; }
    }

    public partial class DctermsDescription
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("property_id")]
        public long PropertyId { get; set; }

        [JsonProperty("property_label")]
        public string PropertyLabel { get; set; }

        [JsonProperty("is_public")]
        public bool IsPublic { get; set; }

        [JsonProperty("@value")]
        public string Value { get; set; }
    }

    public partial class OCreated
    {
        [JsonProperty("@value")]
        public DateTimeOffset Value { get; set; }

        [JsonProperty("@type")]
        public Uri Type { get; set; }
    }

    public partial class OOwner
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("o:id")]
        public long OId { get; set; }
    }

    public partial class Reverse
    {
        [JsonProperty("crm:P138_represents")]
        public ReverseCrmP138Represent[] CrmP138Represents { get; set; }
    }

    public partial class ReverseCrmP138Represent
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("o:title")]
        public string OTitle { get; set; } 
    }

    public partial class ThumbnailDisplayUrls
    {
        [JsonProperty("large")]
        public object Large { get; set; }

        [JsonProperty("medium")]
        public object Medium { get; set; }

        [JsonProperty("square")]
        public object Square { get; set; }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    public partial class OmekaToUnity
    {
        public static OmekaToUnity[] FromJson(string json) => JsonConvert.DeserializeObject<OmekaToUnity[]>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OmekaToUnity[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }
}